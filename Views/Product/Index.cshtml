@model List<IceCreame_MVC.Models.ProductModel>

@{
    ViewData["Title"] = "Product";

    // --- Smarter Pagination Logic ---
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
    int pageRange = 2; // How many pages to show before and after the current page
    int startPage = Math.Max(1, currentPage - pageRange);
    int endPage = Math.Min(totalPages, currentPage + pageRange);

    if (endPage - startPage < pageRange * 2)
    {
        if (startPage == 1)
            endPage = Math.Min(totalPages, startPage + (pageRange * 2));
        else if (endPage == totalPages)
            startPage = Math.Max(1, endPage - (pageRange * 2));
    }
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    :root {
        --primary-accent: #8e44ad;
        --primary-bg: #f9f0ff;
        --price-color: #d35400;
    }

    body {
        background-color: var(--primary-bg);
    }

    .product-card {
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
        border: 1px solid #e9ecef;
        border-radius: 16px;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: white;
        display: flex;
        flex-direction: column;
    }

        .product-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
        }

    .product-img-wrapper {
        position: relative;
    }

    .product-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .stock-badge {
        position: absolute;
        top: 12px;
        right: 12px;
    }

    .card-title {
        font-weight: 600;
        color: #34495e;
    }

    .brand-text {
        font-size: 0.9rem;
        color: #7f8c8d;
        font-weight: 500;
    }

    .price-tag {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--price-color);
    }

    .star-rating .bi-star-fill {
        color: #f39c12;
    }

    .star-rating .bi-star {
        color: #e0e0e0;
    }

    .page-link.active, .active > .page-link {
        background-color: var(--primary-accent);
        border-color: var(--primary-accent);
    }

    .page-link {
        color: var(--primary-accent);
    }

        .page-link:focus {
            box-shadow: 0 0 0 0.25rem rgba(142, 68, 173, 0.25);
        }

    .empty-state {
        text-align: center;
        padding: 4rem 1rem;
        background-color: #ffffff;
        border-radius: 0.5rem;
        border: 2px dashed #d1c4e9;
    }
</style>

<div class="container py-5">

    <div class="card p-3 mb-4 shadow-sm">
        <div class="d-flex flex-column flex-lg-row gap-3 align-items-center">
            <h4 class="mb-0 text-nowrap"><i class="bi bi-cone-striped text-primary-accent"></i> Product Gallery</h4>
            <div class="input-group flex-grow-1">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" id="searchInput" class="form-control" placeholder="Search by product name...">
            </div>
            <div class="d-flex gap-3 w-100 w-lg-auto">
                <select id="brandFilter" class="form-select">
                    <option value="">All Brands</option>
                    @foreach (var brand in Model.Select(p => p.BrandName).Distinct().OrderBy(b => b))
                    {
                        <option value="@brand">@brand</option>
                    }
                </select>
                <select id="sortControl" class="form-select">
                    <option value="name-asc">Sort by Name</option>
                    <option value="price-asc">Price: Low to High</option>
                    <option value="price-desc">Price: High to Low</option>
                </select>
                <a asp-action="AddEdit" class="btn btn-success text-nowrap">
                    <i class="bi bi-plus-circle"></i> Add
                </a>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div id="product-list" class="row g-4">
            @foreach (var product in Model)
            {
                // Simulating extra data. You should get this from your model.
                bool isInStock = (product.ProductId % 3 != 0);
                double rating = 3.5 + (product.ProductId % 3) * 0.5;

                <div class="col-12 col-sm-6 col-md-4 col-lg-3 product-item"
                     data-name="@product.ProductName"
                     data-brand="@product.BrandName"
                     data-price="@product.Price">
                    <div class="card product-card">
                        <div class="product-img-wrapper">
                            <img src="https://picsum.photos/400/300?random=@product.ProductId" class="product-img" alt="@product.ProductName">
                            <span class="badge stock-badge @(isInStock ? "bg-success-subtle text-success-emphasis" : "bg-danger-subtle text-danger-emphasis")">
                                @(isInStock ? "In Stock" : "Out of Stock")
                            </span>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <p class="brand-text mb-1">@product.BrandName</p>
                            <h5 class="card-title">@product.ProductName</h5>
                            <div class="star-rating my-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="bi @(i <= rating ? "bi-star-fill" : "bi-star")"></i>
                                }
                            </div>
                            <p class="card-text small text-muted flex-grow-1">@product.Description</p>
                            <p class="price-tag mt-2">₹@product.Price?.ToString("0.00")</p>
                        </div>
                        <div class="card-footer bg-white border-0 pt-0 pb-3">
                            <div class="d-flex justify-content-between">
                                <a asp-action="AddEdit" asp-route-id="@product.ProductId" class="btn btn-sm btn-outline-warning text-dark">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger delete-btn"
                                        data-bs-toggle="modal" data-bs-target="#deleteConfirmModal"
                                        data-product-name="@product.ProductName"
                                        data-delete-url="@Url.Action("Delete", new { id = product.ProductId })">
                                    <i class="bi bi-trash-fill"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div id="no-results" class="text-center py-5" style="display: none;">
            <div class="empty-state">
                <i class="bi bi-search-heart fs-1 text-muted"></i>
                <h4 class="mt-3">No Products Found</h4>
                <p class="text-muted">Try adjusting your search or filter criteria.</p>
            </div>
        </div>

        <nav class="d-flex justify-content-center mt-5">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="1" aria-label="First">&laquo;</a>
                </li>
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(currentPage - 1)" aria-label="Previous">&lsaquo;</a>
                </li>

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-page="@i">@i</a>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(currentPage + 1)" aria-label="Next">&rsaquo;</a>
                </li>
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@totalPages" aria-label="Last">&raquo;</a>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <div class="empty-state">
            <i class="bi bi-emoji-dizzy fs-1 text-muted"></i>
            <h4 class="mt-3">The gallery is empty!</h4>
            <p class="text-muted">Let's add the first delicious ice cream product.</p>
            <a asp-action="AddEdit" class="btn btn-lg btn-success mt-2">
                <i class="bi bi-plus-circle me-1"></i> Add First Product
            </a>
        </div>
    }
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <strong id="productNameToDelete"></strong>? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <a id="confirmDeleteButton" href="#" class="btn btn-danger">Delete Product</a>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // --- Elements ---
            const searchInput = document.getElementById('searchInput');
            const brandFilter = document.getElementById('brandFilter');
            const sortControl = document.getElementById('sortControl');
            const productList = document.getElementById('product-list');
            const noResultsMessage = document.getElementById('no-results');
            if (!productList) return; // Exit if no products are on the page

            const productItems = Array.from(productList.getElementsByClassName('product-item'));

            // --- Delete Modal Logic ---
            const deleteModal = document.getElementById('deleteConfirmModal');
            if (deleteModal) {
                deleteModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const productName = button.getAttribute('data-product-name');
                    const deleteUrl = button.getAttribute('data-delete-url');
                    deleteModal.querySelector('#productNameToDelete').textContent = productName;
                    deleteModal.querySelector('#confirmDeleteButton').setAttribute('href', deleteUrl);
                });
            }

            // --- Main Filter & Sort Function ---
            function updateProductView() {
                const searchQuery = searchInput.value.toLowerCase();
                const selectedBrand = brandFilter.value;
                const sortValue = sortControl.value;
                let visibleCount = 0;

                // 1. Filter products
                productItems.forEach(item => {
                    const name = item.dataset.name.toLowerCase();
                    const brand = item.dataset.brand;

                    const matchesSearch = name.includes(searchQuery);
                    const matchesBrand = (selectedBrand === "" || brand === selectedBrand);

                    if (matchesSearch && matchesBrand) {
                        item.style.display = '';
                        visibleCount++;
                    } else {
                        item.style.display = 'none';
                    }
                });

                // 2. Sort visible products
                const sortedItems = productItems.sort((a, b) => {
                    const nameA = a.dataset.name;
                    const nameB = b.dataset.name;
                    const priceA = parseFloat(a.dataset.price);
                    const priceB = parseFloat(b.dataset.price);

                    switch (sortValue) {
                        case 'price-asc':
                            return priceA - priceB;
                        case 'price-desc':
                            return priceB - priceA;
                        case 'name-asc':
                        default:
                            return nameA.localeCompare(nameB);
                    }
                });

                // 3. Re-append to the DOM
                sortedItems.forEach(item => productList.appendChild(item));

                // 4. Update UI Messages
                noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
            }

            // --- Event Listeners ---
            searchInput.addEventListener('input', updateProductView);
            brandFilter.addEventListener('change', updateProductView);
            sortControl.addEventListener('change', updateProductView);
        });
    </script>
}