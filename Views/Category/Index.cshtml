@model List<IceCreame_MVC.Models.CategoryModel>

@{
    ViewData["Title"] = "Categories";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    /* CSS Variables for easy theming */
    :root {
        --card-bg: #fff;
        --card-border-color: #e0e0e0;
        --card-header-bg: #f8f9fa;
        --card-radius: 0.75rem;
        --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        --card-shadow-hover: 0 10px 20px rgba(0, 0, 0, 0.1);
        --accent-color: #0d6efd; /* Bootstrap Primary */
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(15px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #categoryGrid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1.5rem;
    }

    .category-card {
        display: flex; /* Required for search filter */
        flex-direction: column;
        border: 1px solid var(--card-border-color);
        border-left: 4px solid var(--card-border-color);
        border-radius: var(--card-radius);
        background-color: var(--card-bg);
        box-shadow: var(--card-shadow);
        transition: transform 0.3s ease, box-shadow 0.3s ease, border-left-color 0.3s ease;
        animation: fadeIn 0.5s ease-out forwards;
        opacity: 0;
    }

        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--card-shadow-hover);
            border-left-color: var(--accent-color);
        }

        .category-card.deleting {
            transition: opacity 0.4s ease, transform 0.4s ease;
            opacity: 0;
            transform: scale(0.9);
        }

        .category-card .card-header {
            background-color: var(--card-header-bg);
            padding: 1rem 1.25rem;
            border-bottom: 1px solid var(--card-border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .category-card .card-body {
            padding: 1.25rem;
            flex-grow: 1;
            color: #555;
        }

        .category-card .card-footer {
            background-color: var(--card-header-bg);
            padding: 0.75rem 1.25rem;
            border-top: 1px solid var(--card-border-color);
            text-align: right;
        }

    /* NEW: List View Styles */
    #categoryGrid.list-view {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

        #categoryGrid.list-view .category-card {
            flex-direction: row;
            align-items: center;
        }

        #categoryGrid.list-view .card-header,
        #categoryGrid.list-view .card-footer {
            border: none;
            background-color: transparent;
        }

        #categoryGrid.list-view .card-footer {
            margin-left: auto;
        }

        #categoryGrid.list-view .card-body {
            padding: 0.5rem 1.25rem;
        }
</style>

<div class="card shadow-sm mt-4">
    <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
            <h2 class="mb-0 h4">
                <i class="bi bi-tags-fill me-2 text-primary"></i> @ViewData["Title"]
                @if (Model != null)
                {
                    <span id="categoryCountBadge" class="badge bg-primary rounded-pill ms-2">@Model.Count()</span>
                }
            </h2>
            <a asp-action="AddEdit" class="btn btn-primary rounded-pill fw-bold shadow-sm">
                <i class="bi bi-plus-circle me-1"></i> Create New
            </a>
        </div>
    </div>

    <div class="card-body">
        <div class="d-flex flex-column flex-md-row gap-2 mb-4 p-3 border rounded bg-light">
            <div class="input-group flex-grow-1">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" id="searchInput" class="form-control" placeholder="Type to filter categories...">
            </div>
            <div class="d-flex gap-2">
                <select id="sortControl" class="form-select" style="min-width: 150px;">
                    <option value="name-asc">Sort by Name (A-Z)</option>
                    <option value="name-desc">Sort by Name (Z-A)</option>
                    <option value="id-desc">Newest First</option>
                    <option value="id-asc">Oldest First</option>
                </select>
                <div id="view-toggle" class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-secondary" data-view="grid" title="Grid View"><i class="bi bi-grid-3x3-gap-fill"></i></button>
                    <button type="button" class="btn btn-outline-secondary" data-view="list" title="List View"><i class="bi bi-list-ul"></i></button>
                </div>
            </div>
        </div>

        @if (Model != null && Model.Any())
        {
            @Html.AntiForgeryToken()

            <div id="categoryGrid">
                @foreach (var cat in Model)
                {
                    <div class="category-card" id="card-@cat.CategoryId"
                         data-name="@cat.CategoryName"
                         data-id="@cat.CategoryId">
                        <div class="card-header">
                            <span><i class="bi bi-ice-cream me-2 text-muted"></i>@cat.CategoryName</span>
                            <span class="badge bg-light text-dark rounded-pill">ID: @cat.CategoryId</span>
                        </div>
                        <div class="card-body">
                            <p class="mb-0 small">@cat.Description</p>
                        </div>
                        <div class="card-footer">
                            <div class="btn-group" role="group">
                                <a asp-action="AddEdit" asp-route-id="@cat.CategoryId" class="btn btn-sm btn-outline-secondary" title="Edit">
                                    <i class="bi bi-pencil-fill"></i> Edit
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger" title="Delete"
                                        data-bs-toggle="modal" data-bs-target="#deleteConfirmModal"
                                        data-delete-url="@Url.Action("Delete", new { id = cat.CategoryId })"
                                        data-category-name="@cat.CategoryName"
                                        data-card-id="card-@cat.CategoryId">
                                    <i class="bi bi-trash-fill"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div id="noResultsMessage" class="text-center p-5 border rounded bg-light mt-4" style="display:none;">
                <i class="bi bi-search fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No categories match your search.</h4>
            </div>
        }
        else
        {
            <div class="text-center p-5">
                <i class="bi bi-tags" style="font-size: 3rem; color: #6c757d;"></i>
                <h4 class="mt-3">No Categories Yet</h4>
                <p class="text-muted">Get started by creating the first category.</p>
                <a asp-action="AddEdit" class="btn btn-primary mt-2"><i class="bi bi-plus-circle me-1"></i> Create Category</a>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel"><i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the category: <strong id="categoryNameToDelete"></strong>?
                <p class="text-muted mt-2">(તમે આને કાઢી નાખવા માંગો છો તેની ખાતરી છે?)</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- Elements ---
            const searchInput = document.getElementById('searchInput');
            const sortControl = document.getElementById('sortControl');
            const viewToggle = document.getElementById('view-toggle');
            const categoryGrid = document.getElementById('categoryGrid');
            const noResultsMessage = document.getElementById('noResultsMessage');
            const categoryCountBadge = document.getElementById('categoryCountBadge');
            const deleteModalElement = document.getElementById('deleteConfirmModal');

            if (!categoryGrid) return;
            let allCards = Array.from(categoryGrid.getElementsByClassName('category-card'));

            // --- Main Update Function for Filter, Sort ---
            function updateView() {
                const filter = searchInput.value.toLowerCase();

                let visibleCards = 0;
                allCards.forEach(card => {
                    const cardText = card.textContent.toLowerCase();
                    const isVisible = cardText.includes(filter);
                    card.style.display = isVisible ? 'flex' : 'none';
                    if (isVisible) visibleCards++;
                });
                noResultsMessage.style.display = visibleCards === 0 ? 'block' : 'none';

                const sortValue = sortControl.value;
                const visibleCardElements = allCards.filter(card => card.style.display !== 'none');

                visibleCardElements.sort((a, b) => {
                    const nameA = a.dataset.name.toLowerCase();
                    const nameB = b.dataset.name.toLowerCase();
                    const idA = parseInt(a.dataset.id);
                    const idB = parseInt(b.dataset.id);

                    switch(sortValue) {
                        case 'name-desc': return nameB.localeCompare(nameA);
                        case 'id-asc': return idA - idB;
                        case 'id-desc': return idB - idA;
                        default: return nameA.localeCompare(nameB);
                    }
                });
                visibleCardElements.forEach(card => categoryGrid.appendChild(card));
            }

            function setView(view) {
                if (view === 'list') {
                    categoryGrid.classList.add('list-view');
                    viewToggle.querySelector('[data-view="list"]').classList.add('active', 'btn-primary');
                    viewToggle.querySelector('[data-view="list"]').classList.remove('btn-outline-secondary');
                    viewToggle.querySelector('[data-view="grid"]').classList.remove('active', 'btn-primary');
                    viewToggle.querySelector('[data-view="grid"]').classList.add('btn-outline-secondary');
                } else {
                    categoryGrid.classList.remove('list-view');
                    viewToggle.querySelector('[data-view="grid"]').classList.add('active', 'btn-primary');
                    viewToggle.querySelector('[data-view="grid"]').classList.remove('btn-outline-secondary');
                    viewToggle.querySelector('[data-view="list"]').classList.remove('active', 'btn-primary');
                    viewToggle.querySelector('[data-view="list"]').classList.add('btn-outline-secondary');
                }
                localStorage.setItem('categoryView', view);
            }

            if (viewToggle) {
                viewToggle.addEventListener('click', (e) => {
                    const button = e.target.closest('button');
                    if (button) setView(button.dataset.view);
                });
            }

            if (deleteModalElement) {
                let urlToDelete = '', cardIdToDelete = '';
                const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

                deleteModalElement.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    urlToDelete = button.dataset.deleteUrl;
                    cardIdToDelete = button.dataset.cardId;
                    document.getElementById('categoryNameToDelete').textContent = button.dataset.categoryName;
                });

                confirmDeleteBtn.addEventListener('click', function() {
                    confirmDeleteBtn.disabled = true;
                    confirmDeleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Deleting...';

                    fetch(urlToDelete, {
                        method: 'POST',
                        headers: { 'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const cardToRemove = document.getElementById(cardIdToDelete);
                            if (cardToRemove) {
                                cardToRemove.classList.add('deleting');
                                cardToRemove.addEventListener('transitionend', () => {
                                    cardToRemove.remove();
                                    allCards = allCards.filter(c => c.id !== cardIdToDelete);
                                    if(categoryCountBadge) categoryCountBadge.textContent = allCards.length;
                                });
                            }
                            bootstrap.Modal.getInstance(deleteModalElement).hide();
                        } else {
                            alert(data.message || 'An error occurred.');
                        }
                    })
                    .catch(error => alert('An unexpected network error occurred.'))
                    .finally(() => {
                        confirmDeleteBtn.disabled = false;
                        confirmDeleteBtn.innerHTML = 'Delete';
                    });
                });
            }

            if(searchInput) searchInput.addEventListener('input', updateView);
            if(sortControl) sortControl.addEventListener('input', updateView);

            const savedView = localStorage.getItem('categoryView') || 'grid';
            setView(savedView);
            updateView();
        });
    </script>
}