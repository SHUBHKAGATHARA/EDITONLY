@model List<IceCreame_MVC.Models.BrandModel>

@{
    ViewData["Title"] = "Brands";

    // Helper function to generate a color from a string for the avatar
    Func<string, string> GetColorFromString = (str) =>
    {
        int hash = 0;
        if (string.IsNullOrEmpty(str)) return "#6c757d";
        for (int i = 0; i < str.Length; i++)
        {
            hash = str[i] + ((hash << 5) - hash);
        }
        string color = "#";
        for (int i = 0; i < 3; i++)
        {
            var value = (hash >> (i * 8)) & 0xFF;
            color += value.ToString("X2");
        }
        return color;
    };
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    .brand-header {
        border-bottom: 2px solid rgba(255, 255, 255, 0.3);
        padding-bottom: 1rem;
        color: white;
    }

    .brand-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
        position: relative;
        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    }

    .brand-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1;
    }

    .brand-card:hover::before {
        opacity: 1;
    }

    .brand-card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
        border-color: rgba(255, 255, 255, 0.4);
    }

    .card-body {
        position: relative;
        z-index: 2;
        color: white;
    }

    .brand-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: 500;
        flex-shrink: 0;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .controls-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    }

    .search-wrapper .form-control {
        padding-left: 2.5rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        backdrop-filter: blur(10px);
    }

    .search-wrapper .search-icon {
        position: absolute;
        top: 50%;
        left: 0.8rem;
        transform: translateY(-50%);
        color: #6c757d;
    }

    .form-control::placeholder {
        color: rgba(255, 255, 255, 0.7);
    }

    .form-control:focus {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.5);
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
        color: white;
    }

    .form-select {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        backdrop-filter: blur(10px);
    }

    .empty-state {
        text-align: center;
        padding: 4rem 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        border: 2px dashed rgba(255, 255, 255, 0.2);
        color: white;
        backdrop-filter: blur(20px);
    }

    .empty-state i {
        font-size: 3.5rem;
        color: rgba(255, 255, 255, 0.7);
    }

    .btn {
        border-radius: 15px;
        font-weight: 600;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    .btn-outline-primary {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
    }

    .btn-outline-primary:hover {
        background: rgba(255, 255, 255, 0.2);
        color: white;
    }

    .btn-success {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        border: none;
        color: white;
    }

    .card-title {
        color: white;
        font-weight: 600;
    }

    .card-text {
        color: rgba(255, 255, 255, 0.8);
    }

    .badge {
        backdrop-filter: blur(10px);
        border-radius: 15px;
    }

    /* List View Styles */
    #brandCards.list-view .brand-card-wrapper {
        margin-bottom: 0.75rem;
    }

    #brandCards.list-view .brand-card {
        flex-direction: row;
        align-items: center;
        padding: 0.75rem;
    }

    #brandCards.list-view .card-body {
        display: flex;
        flex-direction: row;
        align-items: center;
        padding: 0;
        flex-grow: 1;
    }

    #brandCards.list-view .brand-info {
        flex-grow: 1;
    }

    #brandCards.list-view .brand-actions {
        margin-left: auto;
    }

    #brandCards.list-view .card-text, #brandCards.list-view .card-footer {
        display: none;
    }

    .copy-btn {
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .copy-btn:hover {
        transform: scale(1.2);
    }

    /* Animation Classes */
    .fade-in-up {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.6s ease;
    }

    .fade-in-up.visible {
        opacity: 1;
        transform: translateY(0);
    }

    @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
    }
</style>

<div class="container py-4 py-md-5">
    <div class="brand-header d-flex justify-content-between align-items-center mb-4 fade-in-up">
        <h1 class="mb-0 h2 display-6"><i class="bi bi-stars text-primary me-2"></i>Ice Cream Brands âœ¨</h1>
    </div>

    <div class="controls-card p-3 mb-4 fade-in-up">
        <div class="d-flex flex-column flex-lg-row gap-2 align-items-center">
            <div class="search-wrapper flex-grow-1 w-100">
                <i class="bi bi-search search-icon"></i>
                <input type="text" id="searchInput" class="form-control" placeholder="Search brands...">
            </div>
            <div class="d-flex flex-column flex-sm-row gap-2 w-100 w-lg-auto">
                <select id="sortSelect" class="form-select">
                    <option value="name-asc">Sort by Name (A-Z)</option>
                    <option value="name-desc">Sort by Name (Z-A)</option>
                </select>
                <div class="btn-group w-100 w-sm-auto" role="group">
                    <button type="button" id="btn-grid-view" class="btn btn-outline-primary" title="Grid View"><i class="bi bi-grid-3x3-gap-fill"></i></button>
                    <button type="button" id="btn-list-view" class="btn btn-outline-primary" title="List View"><i class="bi bi-list-ul"></i></button>
                </div>
                <a href="@Url.Action("AddEdit", "Brand")" class="btn btn-success flex-shrink-0">
                    <i class="bi bi-plus-lg"></i>
                    <span class="d-none d-sm-inline ms-1">Add Brand</span>
                </a>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="row fade-in-up" id="brandCards">
            @foreach (var brand in Model)
            {
                var avatarColor = GetColorFromString(brand.BrandName);
                // --- NEW: Calculate word count from existing Description field ---
                var wordCount = !string.IsNullOrWhiteSpace(brand.Description) ? brand.Description.Split(new char[] { ' ', '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).Length : 0;

                <div class="col brand-card-wrapper" data-brand-name="@brand.BrandName">
                    <div class="card h-100 shadow-sm brand-card" style="animation: float 6s ease-in-out infinite; animation-delay: @((brand.BrandId % 4) * 0.5)s;">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center brand-info">
                                <div class="brand-avatar me-3" style="background-color: @avatarColor;">
                                    @brand.BrandName.FirstOrDefault()
                                </div>
                                <div class="flex-grow-1">
                                    <h5 class="card-title mb-0">@brand.BrandName</h5>

                                    <div>
                                        <span class="badge bg-light text-dark fw-medium">
                                            ID: @brand.BrandId
                                        </span>
                                        <i class="bi bi-clipboard-check-fill copy-btn ms-1 text-primary"
                                           title="Copy ID"
                                           data-copy-text="@brand.BrandId"></i>
                                    </div>
                                </div>
                            </div>

                            <hr class="my-3">

                            <div class="mb-3 flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <h6 class="mb-0 small text-uppercase" style="color: rgba(255, 255, 255, 0.7);">About</h6>
                                    <span class="badge bg-light text-dark">@wordCount words</span>
                                </div>
                                <p class="card-text small">
                                    @brand.Description
                                </p>
                            </div>

                            <div class="card-footer bg-transparent border-0 mt-auto p-0">
                                <div class="d-flex justify-content-end gap-2 brand-actions">
                                    <a href="#" class="btn btn-sm btn-outline-info" title="Share @brand.BrandName">
                                        <i class="bi bi-share-fill"></i>
                                    </a>
                                    <a href="@Url.Action("AddEdit", "Brand", new { id = brand.BrandId })" class="btn btn-sm btn-outline-primary" title="Edit @brand.BrandName">
                                        <i class="bi bi-pencil-square"></i>
                                    </a>
                                    <button type="button" class="btn btn-sm btn-outline-danger delete-btn"
                                            data-bs-toggle="modal" data-bs-target="#deleteConfirmModal"
                                            data-brand-name="@brand.BrandName" data-delete-url="@Url.Action("Delete", "Brand", new { id = brand.BrandId })"
                                            title="Delete @brand.BrandName">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="text-center fade-in-up" id="noResults" style="display:none;">
            <div class="empty-state mt-4"><i class="bi bi-search-heart"></i><h4 class="mt-3">No Matches Found</h4><p class="text-muted">Try another keyword!</p></div>
        </div>
    }
    else
    {
        <div class="empty-state fade-in-up">
            <i class="bi bi-emoji-dizzy"></i><h4 class="mt-3">No Brands Yet!</h4><p class="text-muted">Let's add the first brand.</p>
            <a href="@Url.Action("AddEdit", "Brand")" class="btn btn-primary mt-2"><i class="bi bi-plus-circle me-1"></i> Add Your First Brand</a>
        </div>
    }
</div>

<!-- Modal with Glass Morphism -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 20px; color: white;">
            <div class="modal-header"><h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div>
            <div class="modal-body">Are you sure you want to delete the brand: <strong id="brandNameToDelete"></strong>?<p class="text-danger mt-2"><small>This action cannot be undone.</small></p></div>
            <div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><a id="confirmDeleteButton" href="#" class="btn text-white" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">Delete</a></div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Scroll animations
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, observerOptions);

            document.querySelectorAll('.fade-in-up').forEach(el => observer.observe(el));

            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"], [title]');
            const tooltipList = [...tooltipTriggerList].map(el => new bootstrap.Tooltip(el));

            const searchInput = document.getElementById("searchInput");
            const sortSelect = document.getElementById("sortSelect");
            const brandCardsContainer = document.getElementById("brandCards");
            const cardWrappers = document.querySelectorAll(".brand-card-wrapper");
            const noResults = document.getElementById("noResults");
            const deleteModal = document.getElementById('deleteConfirmModal');
            const btnGridView = document.getElementById('btn-grid-view');
            const btnListView = document.getElementById('btn-list-view');

            if (!brandCardsContainer) return;

            // --- Setup Delete Modal ---
            if (deleteModal) {
                deleteModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const brandName = button.getAttribute('data-brand-name');
                    const deleteUrl = button.getAttribute('data-delete-url');
                    deleteModal.querySelector('#brandNameToDelete').textContent = brandName;
                    deleteModal.querySelector('#confirmDeleteButton').setAttribute('href', deleteUrl);
                });
            }

            // --- NEW: Clipboard Copy Logic ---
            const copyButtons = document.querySelectorAll('.copy-btn');
            copyButtons.forEach(btn => {
                const originalIcon = btn.className; // e.g., 'bi bi-clipboard-check-fill...'
                const originalTitle = btn.getAttribute('title');
                const tooltipInstance = bootstrap.Tooltip.getInstance(btn);

                btn.addEventListener('click', () => {
                    const textToCopy = btn.getAttribute('data-copy-text');
                    navigator.clipboard.writeText(textToCopy).then(() => {
                        // Success! Give feedback.
                        btn.className = 'bi bi-check-lg text-success';
                        btn.setAttribute('title', 'Copied!');
                        if (tooltipInstance) {
                            tooltipInstance.setContent({ '.tooltip-inner': 'Copied!' });
                            tooltipInstance.show();
                        }

                        // Revert back after a delay
                        setTimeout(() => {
                            btn.className = originalIcon;
                            btn.setAttribute('title', originalTitle);
                             if (tooltipInstance) {
                                tooltipInstance.setContent({ '.tooltip-inner': originalTitle });
                                tooltipInstance.hide();
                            }
                        }, 2000);
                    });
                });
            });

            // --- View Toggle Logic ---
            const setView = (view) => {
                if (view === 'list') {
                    brandCardsContainer.classList.add('list-view');
                    brandCardsContainer.classList.remove('row', 'row-cols-1', 'row-cols-md-2', 'row-cols-lg-3', 'row-cols-xl-4', 'g-4');
                    btnListView.classList.add('active');
                    btnGridView.classList.remove('active');
                } else {
                    brandCardsContainer.classList.remove('list-view');
                    brandCardsContainer.classList.add('row', 'row-cols-1', 'row-cols-md-2', 'row-cols-lg-3', 'row-cols-xl-4', 'g-4');
                    btnGridView.classList.add('active');
                    btnListView.classList.remove('active');
                }
                localStorage.setItem('brandView', view);
            };

            if (btnGridView && btnListView) {
                btnGridView.addEventListener('click', () => setView('grid'));
                btnListView.addEventListener('click', () => setView('list'));
            }

            // --- Search and Sort Logic ---
            const filterAndSortCards = () => {
                // (This function remains the same as before)
                const query = searchInput.value.toLowerCase().trim();
                let visibleCount = 0;
                cardWrappers.forEach(wrapper => {
                    const name = wrapper.dataset.brandName.toLowerCase();
                    const isVisible = name.includes(query);
                    wrapper.style.display = isVisible ? "" : "none";
                    if (isVisible) visibleCount++;
                });

                const sortValue = sortSelect.value;
                const sortedWrappers = Array.from(cardWrappers).sort((a, b) => {
                    const nameA = a.dataset.brandName.toLowerCase();
                    const nameB = b.dataset.brandName.toLowerCase();
                    return (sortValue === 'name-asc') ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
                });

                sortedWrappers.forEach(wrapper => brandCardsContainer.appendChild(wrapper));

                if (noResults) noResults.style.display = visibleCount === 0 ? "block" : "none";
                brandCardsContainer.style.display = visibleCount === 0 ? "none" : "";
            };

            if (searchInput) searchInput.addEventListener("input", filterAndSortCards);
            if (sortSelect) sortSelect.addEventListener("change", filterAndSortCards);

            const savedView = localStorage.getItem('brandView') || 'grid';
            setView(savedView);
            filterAndSortCards();
        });
    </script>
}